/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package danaral;

import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Color;
import java.awt.Component;
import java.awt.Image;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Stream;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Manel
 */
public class EvenimentConcentratForm extends javax.swing.JFrame {

    /**
     * Creates new form EvenimentConcentrat
     */
    public EvenimentConcentratForm() {
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(formPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        initComponents();
         jMenuItem1.setIcon(
                new ImageIcon(new ImageIcon(getClass().getResource("pdf.png")).getImage().getScaledInstance(25, 25, Image.SCALE_SMOOTH))
        );
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                c.setBackground(row % 2 == 0 ? Color.LIGHT_GRAY : Color.WHITE);

                return c;
            }
        };
        centerRenderer.setHorizontalAlignment(javax.swing.JLabel.CENTER);
        
        //jTable1.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable1.setDefaultRenderer(Object.class, centerRenderer);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "De la", "Până la", "Durată", "Eveniment", "Viteză maximă", "Viteză medie", "Cantitate", "Scopul înregistrării"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setSelectionForeground(new java.awt.Color(255, 0, 0));
        jScrollPane1.setViewportView(jTable1);

        jMenu1.setText("Optiuni");

        jMenuItem1.setText("Generează PDF");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 798, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 125, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        try {
            savePDF("Evenimente tahograf " + Danaral.getDanaral().tahografForm.jComboBox1.getSelectedItem() + dataIncepere.replace(":", ".") + " " + dataIncheiere.replace(":", "."));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Nu am putut salva fisierul, poate mai e deschis in Adobe Acrobat sau alt program");
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    List<Eveniment> evenimente;
    String dataIncepere, dataIncheiere;
    public void updateUI(List<Eveniment> evenimente,String dataIncepere,String dataIncheiere) {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        setTitle("Evenimente din "+dataIncepere+" pana in"+dataIncheiere);
        this.evenimente=evenimente;
        this.dataIncepere=dataIncepere;
        this.dataIncheiere=dataIncheiere;
        for (Eveniment e : evenimente) {
            if (e instanceof OverSpeed) {
                String afisareTip = e.tip;
                
                if (Danaral.dictionar.get(e.tip) != null) {
                    afisareTip = (String) Danaral.dictionar.get(e.tip);
                }
                OverSpeed overSpeed=(OverSpeed)e;
                String afisareMotiv = e.motivInregistrare;
                if (Danaral.dictionar.get(afisareMotiv) != null) {
                    afisareMotiv = (String) Danaral.dictionar.get(afisareMotiv);
                }
                model.addRow(new Object[]{
                    e.timpIncepere, e.timpIncheiere, e.durata.replace("days", "zile"), afisareTip, overSpeed.maxSpeed, overSpeed.averageSpeed, e.cantitate, afisareMotiv
                });
            } else {
                String afisareTip = e.tip;
                if (Danaral.dictionar.get(e.tip) != null) {
                    afisareTip = (String) Danaral.dictionar.get(e.tip);
                }

                String afisareMotiv = e.motivInregistrare;
                if (Danaral.dictionar.get(afisareMotiv) != null) {
                    afisareMotiv = (String) Danaral.dictionar.get(afisareMotiv);
                }

                model.addRow(new Object[]{
                    e.timpIncepere, e.timpIncheiere, e.durata.replace("days", "zile"), afisareTip, "", "", e.cantitate, afisareMotiv
                });
            }
        }
        resizeColumnWidth(jTable1);
    }
    public void resizeColumnWidth(JTable table) {
        final TableColumnModel columnModel = table.getColumnModel();
        for (int column = 0; column < table.getColumnCount(); column++) {
            int width = 50; // Min width
            for (int row = 0; row < table.getRowCount(); row++) {
                TableCellRenderer renderer = table.getCellRenderer(row, column);
                Component comp = table.prepareRenderer(renderer, row, column);
                width = Math.max(comp.getPreferredSize().width + 1, width);
            }
            if (width > 300) {
                width = 300;
            }
            columnModel.getColumn(column).setPreferredWidth(width);
        }
    }

    private void addTableHeader(PdfPTable table) {
        Stream.of("De la", "Pana la", "Durata", "Eveniment", "Viteza maxima", "Viteza medie", "Cantitate", "Scop inregistrare")
                .forEach(columnTitle -> {
                    PdfPCell header = new PdfPCell();
                    header.setHorizontalAlignment(Element.ALIGN_CENTER);
                    header.setBackgroundColor(BaseColor.GRAY);
                    header.setBorderWidth(0.7f);
                    
                    Font black = new Font(Font.FontFamily.HELVETICA, 10, Font.NORMAL, BaseColor.BLACK);
                    Chunk text = new Chunk(columnTitle, black);
                    header.setPhrase(new Phrase(text));
                    table.addCell(header);
                });
    }

    private void addRows(PdfPTable table, List<Eveniment> evenimente) {
        /*for (int i = 0; i < rapoarte.size(); i++) {

            PdfPCell header = new PdfPCell();
            header.setBackgroundColor(i%2==0 ? BaseColor.WHITE:BaseColor.LIGHT_GRAY);
            header.setPhrase(new Phrase(rapoarte.get(i).data));
            table.addCell(header);
            
            header.setPhrase(new Phrase(rapoarte.get(i).getTotalOreConduseNoaptea()));
            table.addCell(header);
            
            header.setPhrase(new Phrase(rapoarte.get(i).getTotalOreAltaMuncaNoaptea()));
            table.addCell(header);
            
            header.setPhrase(new Phrase(rapoarte.get(i).getTotalOreLucrateNoaptea()));
            table.addCell(header);


        }*/
        for (int i=0;i<evenimente.size();i++) {
            PdfPCell header = new PdfPCell();
            header.setBackgroundColor(i % 2 == 0 ? BaseColor.WHITE : BaseColor.LIGHT_GRAY);
            
            Font black = new Font(Font.FontFamily.HELVETICA, 6, Font.NORMAL, BaseColor.BLACK);
            
            Chunk text = new Chunk(evenimente.get(i).timpIncepere, black); 
            header.setPhrase(new Phrase(text));
            table.addCell(header);
    
            text = new Chunk(evenimente.get(i).timpIncheiere, black); 
            header.setPhrase(new Phrase(text));
            table.addCell(header);

            text = new Chunk(evenimente.get(i).durata.replace("days", "zile"), black); 
            header.setPhrase(new Phrase(text));
            table.addCell(header);

            text = new Chunk((Danaral.dictionar.get(evenimente.get(i).tip)!=null ? 
                    (String)Danaral.dictionar.get(evenimente.get(i).tip):evenimente.get(i).tip), black); 
            header.setPhrase(new Phrase(text));
            table.addCell(header);

            
            String maxSpeed="";
            if (evenimente.get(i) instanceof OverSpeed){
                OverSpeed os=(OverSpeed)evenimente.get(i);
                maxSpeed=os.maxSpeed;
            }
            text = new Chunk(maxSpeed, black); 
            header.setPhrase(new Phrase(text));
            table.addCell(header);
            
            String averageSpeed="";
            if (evenimente.get(i) instanceof OverSpeed){
                OverSpeed os=(OverSpeed)evenimente.get(i);
                averageSpeed=os.averageSpeed;
            }
            text = new Chunk(averageSpeed, black); 
            header.setPhrase(new Phrase(text));
            table.addCell(header);
            
            text = new Chunk(evenimente.get(i).cantitate, black); 
            header.setPhrase(new Phrase(text));
            table.addCell(header);
            
            text = new Chunk((Danaral.dictionar.get(evenimente.get(i).motivInregistrare)!=null ? 
                    (String)Danaral.dictionar.get(evenimente.get(i).motivInregistrare):evenimente.get(i).motivInregistrare), black); 
            header.setPhrase(new Phrase(text));
            table.addCell(header);
            
        }
    }

    
   void savePDF(String numeFisier){
        try {
            Document document = new Document();
            
            FileOutputStream fileOutputStream = new FileOutputStream(Danaral.PATH + numeFisier + ".pdf");
            PdfWriter.getInstance(document, fileOutputStream);
            document.open();

            Paragraph preface = new Paragraph("Evenimentele vehiculului " + 
                    Danaral.getDanaral().tahografForm.jComboBox1.getSelectedItem()+"\nDin "+dataIncepere+
                    " pana in "+dataIncheiere);

            preface.setSpacingAfter(20f);
            preface.setAlignment(Element.ALIGN_CENTER);
            document.add(preface);
            PdfPTable table = new PdfPTable(new float[]{0.99f, 1, 1,1,1,1,1,1});
            table.setWidthPercentage(100);

            addTableHeader(table);
            addRows(table, evenimente);
            
            document.add(table);
            document.close();

            try {
                try {
                    Thread.sleep(500);
                } catch (InterruptedException ex) {
                    Logger.getLogger(RaportTuraNoapte.class.getName()).log(Level.SEVERE, null, ex);
                }
                System.out.println(Danaral.PATH + numeFisier + ".pdf");
                Runtime.getRuntime().exec("explorer.exe /select," + Danaral.PATH + numeFisier + ".pdf");
            } catch (IOException ex) {
                Logger.getLogger(RaportTuraNoapte.class.getName()).log(Level.SEVERE, null, ex);
            }
            //JOptionPane.showMessageDialog(ActivitatiDetaliate.this, "Fisier salvat "+Danaral.PATH+numeFisier+".pdf");
        } catch (FileNotFoundException | DocumentException ex) {
            Logger.getLogger(RaportTuraNoapte.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EvenimentConcentratForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EvenimentConcentratForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EvenimentConcentratForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EvenimentConcentratForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EvenimentConcentratForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
